(*
  BulbTracer2 for MB3D
  Copyright (C) 2016-2019 Andreas Maschke

  This is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
  General Public License as published by the Free Software Foundation; either version 2.1 of the
  License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
  even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License along with this software;
  if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
*)
unit BulbTracer2;

interface

uses
  VectorMath, VertexList;

type
  TMCVertex = packed record
    Position: TD3Vector;
    Weight: Single;
    ColorIdx, ColorR, ColorG, ColorB: Single;
  end;
  TPMCVertex = ^TMCVertex;

  TMCCube = packed record
    V: Array[0..7] of TMCVertex;
    E: Array[0..12] of TD4Vector;
  end;
  TPMCCube = ^TMCCube;

  TMCCubes = class
  private
    class function IsCaseAmbigous(const N: Integer): Boolean;
    class function CalculateCaseNumber(const Cube: TPMCCube; const RefIsoValue: Single): Integer;
    class procedure ComputeEdgePoint(const V1, V2: TPMCVertex; const RefIsoValue: Single; const IVertex: TPD4Vector);
    class procedure ComputeEdgePoints(const Cube: TPMCCube; const RefIsoValue: Single);
  public
    class procedure InitializeCube(const Cube: TPMCCube; const Position: TPD3Vector; const CubeSize: Double); overload;
    class procedure InitializeCell(const Cube: TPMCCube; const PosX_Y, DirX_Y, PosX1_Y, DirX1_Y, PosX1_Y1, DirX1_Y1, PosX_Y1, DirX_Y1: TPD3Vector); overload;
    class procedure CreateFacesForCube(const Cube: TPMCCube; const RefIsoValue: Single; const Faces: TFacesList; const CalcColors: boolean);
  end;

implementation

uses
  SysUtils, Windows, Math;

{ Those Lookup-tables where taken from the                                     }
{ Marching Cubes Tutorial Applet                                               }
{ Copyright (C) 2002 - GERVAISE Raphael & RICHARD Karen                        }
{ http://users.polytech.unice.fr/~lingrand/MarchingCubes/applet.html           }
{ ---------------------------------------------------------------------------- }
const
  LUT_AMBIGOUS_CASES_COUNT = 60;
  LUT_AMBIGOUS_CASES: Array [0..LUT_AMBIGOUS_CASES_COUNT-1] of Integer = (
        250,
        245,
        237,
        231,
        222,
        219,
        189,
        183,
        175,
        126,
        123,
        95,
        234,
        233,
        227,
        214,
        213,
        211,
        203,
        199,
        188,
        186,
        182,
        174,
        171,
        158,
        151,
        124,
        121,
        117,
        109,
        107,
        93,
        87,
        62,
        61,
        229,
        218,
        181,
        173,
        167,
        122,
        94,
        91,
        150,
        170,
        195,
        135,
        149,
        154,
        163,
        166,
        169,
        172,
        180,
        197,
        202,
        210,
        225,
        165
    );

  LUT_FACES_CONFIGURATIONS_COUNT = 256;
  LUT_EDGES_PER_CONFIGURATION_COUNT = 15;

type
  TFacesConfiguration = Array[0..LUT_EDGES_PER_CONFIGURATION_COUNT-1] of Integer;
  TPFacesConfiguration = ^TFacesConfiguration;

const
  LUT_FACES_AMBIGOUS: Array[0..LUT_FACES_CONFIGURATIONS_COUNT-1, 0..LUT_EDGES_PER_CONFIGURATION_COUNT-1] of Integer = (
        (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, 1, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 2, 11, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 8, 3, 2, 11, 8, 11, 9, 8, -1, -1, -1, -1, -1, -1),
        (3, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 10, 2, 8, 10, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 9, 0, 2, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 10, 2, 1, 9, 10, 9, 8, 10, -1, -1, -1, -1, -1, -1),
        (3, 11, 1, 10, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 11, 1, 0, 8, 11, 8, 10, 11, -1, -1, -1, -1, -1, -1),
        (3, 9, 0, 3, 10, 9, 10, 11, 9, -1, -1, -1, -1, -1, -1),
        (9, 8, 11, 11, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 4, 7, 3, 0, 4, 1, 2, 11, -1, -1, -1, -1, -1, -1),
        (9, 2, 11, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1),
        (2, 11, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1),
        (8, 4, 7, 3, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (10, 4, 7, 10, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1),
        (9, 0, 1, 8, 4, 7, 2, 3, 10, -1, -1, -1, -1, -1, -1),
        (4, 7, 10, 9, 4, 10, 9, 10, 2, 9, 2, 1, -1, -1, -1),
        (3, 11, 1, 3, 10, 11, 7, 8, 4, -1, -1, -1, -1, -1, -1),
        (1, 10, 11, 1, 4, 10, 1, 0, 4, 7, 10, 4, -1, -1, -1),
        (4, 7, 8, 9, 0, 10, 9, 10, 11, 10, 0, 3, -1, -1, -1),
        (4, 7, 10, 4, 10, 9, 9, 10, 11, -1, -1, -1, -1, -1, -1),
        (9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 0, 8, 1, 2, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1),
        (5, 2, 11, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1),
        (2, 11, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1),
        (9, 5, 4, 2, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 10, 2, 0, 8, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1),
        (0, 5, 4, 0, 1, 5, 2, 3, 10, -1, -1, -1, -1, -1, -1),
        (2, 1, 5, 2, 5, 8, 2, 8, 10, 4, 8, 5, -1, -1, -1),
        (11, 3, 10, 11, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1),
        (4, 9, 5, 0, 8, 1, 8, 11, 1, 8, 10, 11, -1, -1, -1),
        (5, 4, 0, 5, 0, 10, 5, 10, 11, 10, 0, 3, -1, -1, -1),
        (5, 4, 8, 5, 8, 11, 11, 8, 10, -1, -1, -1, -1, -1, -1),
        (9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1),
        (0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1),
        (1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 7, 8, 9, 5, 7, 11, 1, 2, -1, -1, -1, -1, -1, -1),
        (11, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1),
        (8, 0, 2, 8, 2, 5, 8, 5, 7, 11, 5, 2, -1, -1, -1),
        (2, 11, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1),
        (7, 9, 5, 7, 8, 9, 3, 10, 2, -1, -1, -1, -1, -1, -1),
        (9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 10, -1, -1, -1),
        (2, 3, 10, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1),
        (10, 2, 1, 10, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1),
        (9, 5, 8, 8, 5, 7, 11, 1, 3, 11, 3, 10, -1, -1, -1),
        (5, 7, 0, 5, 0, 9, 7, 10, 0, 1, 0, 11, 10, 11, 0),
        (10, 11, 0, 10, 0, 3, 11, 5, 0, 8, 0, 7, 5, 7, 0),
        (10, 11, 5, 7, 10, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (11, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, 5, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 0, 1, 5, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 8, 3, 1, 9, 8, 5, 11, 6, -1, -1, -1, -1, -1, -1),
        (1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1),
        (9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1),
        (5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1),
        (2, 3, 10, 11, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (10, 0, 8, 10, 2, 0, 11, 6, 5, -1, -1, -1, -1, -1, -1),
        (0, 1, 9, 2, 3, 10, 5, 11, 6, -1, -1, -1, -1, -1, -1),
        (5, 11, 6, 1, 9, 2, 9, 10, 2, 9, 8, 10, -1, -1, -1),
        (6, 3, 10, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1),
        (0, 8, 10, 0, 10, 5, 0, 5, 1, 5, 10, 6, -1, -1, -1),
        (3, 10, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1),
        (6, 5, 9, 6, 9, 10, 10, 9, 8, -1, -1, -1, -1, -1, -1),
        (5, 11, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 3, 0, 4, 7, 3, 6, 5, 11, -1, -1, -1, -1, -1, -1),
        (1, 9, 0, 5, 11, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1),
        (11, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1),
        (6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1),
        (1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1),
        (8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1),
        (7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9),
        (3, 10, 2, 7, 8, 4, 11, 6, 5, -1, -1, -1, -1, -1, -1),
        (5, 11, 6, 4, 7, 2, 4, 2, 0, 2, 7, 10, -1, -1, -1),
        (0, 1, 9, 4, 7, 8, 2, 3, 10, 5, 11, 6, -1, -1, -1),
        (9, 2, 1, 9, 10, 2, 9, 4, 10, 7, 10, 4, 5, 11, 6),
        (8, 4, 7, 3, 10, 5, 3, 5, 1, 5, 10, 6, -1, -1, -1),
        (5, 1, 10, 5, 10, 6, 1, 0, 10, 7, 10, 4, 0, 4, 10),
        (0, 5, 9, 0, 6, 5, 0, 3, 6, 10, 6, 3, 8, 4, 7),
        (6, 5, 9, 6, 9, 10, 4, 7, 9, 7, 10, 9, -1, -1, -1),
        (11, 4, 9, 6, 4, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 11, 6, 4, 9, 11, 0, 8, 3, -1, -1, -1, -1, -1, -1),
        (11, 0, 1, 11, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1),
        (8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 11, -1, -1, -1),
        (1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1),
        (3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1),
        (0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1),
        (11, 4, 9, 11, 6, 4, 10, 2, 3, -1, -1, -1, -1, -1, -1),
        (0, 8, 2, 2, 8, 10, 4, 9, 11, 4, 11, 6, -1, -1, -1),
        (3, 10, 2, 0, 1, 6, 0, 6, 4, 6, 1, 11, -1, -1, -1),
        (6, 4, 1, 6, 1, 11, 4, 8, 1, 2, 1, 10, 8, 10, 1),
        (9, 6, 4, 9, 3, 6, 9, 1, 3, 10, 6, 3, -1, -1, -1),
        (8, 10, 1, 8, 1, 0, 10, 6, 1, 9, 1, 4, 6, 4, 1),
        (3, 10, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1),
        (6, 4, 8, 10, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (7, 11, 6, 7, 8, 11, 8, 9, 11, -1, -1, -1, -1, -1, -1),
        (0, 7, 3, 0, 11, 7, 0, 9, 11, 6, 7, 11, -1, -1, -1),
        (11, 6, 7, 1, 11, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1),
        (11, 6, 7, 11, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1),
        (1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1),
        (2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9),
        (7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1),
        (7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 3, 10, 11, 6, 8, 11, 8, 9, 8, 6, 7, -1, -1, -1),
        (2, 0, 7, 2, 7, 10, 0, 9, 7, 6, 7, 11, 9, 11, 7),
        (1, 8, 0, 1, 7, 8, 1, 11, 7, 6, 7, 11, 2, 3, 10),
        (10, 2, 1, 10, 1, 7, 11, 6, 1, 6, 7, 1, -1, -1, -1),
        (8, 9, 6, 8, 6, 7, 9, 1, 6, 10, 6, 3, 1, 3, 6),
        (0, 9, 1, 10, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (7, 8, 0, 7, 0, 6, 3, 10, 0, 10, 6, 0, -1, -1, -1),
        (7, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (7, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 0, 8, 10, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 1, 9, 10, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (8, 1, 9, 8, 3, 1, 10, 7, 6, -1, -1, -1, -1, -1, -1),
        (11, 1, 2, 6, 10, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, 3, 0, 8, 6, 10, 7, -1, -1, -1, -1, -1, -1),
        (2, 9, 0, 2, 11, 9, 6, 10, 7, -1, -1, -1, -1, -1, -1),
        (6, 10, 7, 2, 11, 3, 11, 8, 3, 11, 9, 8, -1, -1, -1),
        (7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1),
        (2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1),
        (1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1),
        (11, 7, 6, 11, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1),
        (11, 7, 6, 1, 7, 11, 1, 8, 7, 1, 0, 8, -1, -1, -1),
        (0, 3, 7, 0, 7, 11, 0, 11, 9, 6, 11, 7, -1, -1, -1),
        (7, 6, 11, 7, 11, 8, 8, 11, 9, -1, -1, -1, -1, -1, -1),
        (6, 8, 4, 10, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 6, 10, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1),
        (8, 6, 10, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1),
        (9, 4, 6, 9, 6, 3, 9, 3, 1, 10, 3, 6, -1, -1, -1),
        (6, 8, 4, 6, 10, 8, 2, 11, 1, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, 3, 0, 10, 0, 6, 10, 0, 4, 6, -1, -1, -1),
        (4, 10, 8, 4, 6, 10, 0, 2, 9, 2, 11, 9, -1, -1, -1),
        (11, 9, 3, 11, 3, 2, 9, 4, 3, 10, 3, 6, 4, 6, 3),
        (8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1),
        (0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1),
        (1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1),
        (8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 11, 1, -1, -1, -1),
        (11, 1, 0, 11, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1),
        (4, 6, 3, 4, 3, 8, 6, 11, 3, 0, 3, 9, 11, 9, 3),
        (11, 9, 4, 6, 11, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 9, 5, 7, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, 4, 9, 5, 10, 7, 6, -1, -1, -1, -1, -1, -1),
        (5, 0, 1, 5, 4, 0, 7, 6, 10, -1, -1, -1, -1, -1, -1),
        (10, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1),
        (9, 5, 4, 11, 1, 2, 7, 6, 10, -1, -1, -1, -1, -1, -1),
        (6, 10, 7, 1, 2, 11, 0, 8, 3, 4, 9, 5, -1, -1, -1),
        (7, 6, 10, 5, 4, 11, 4, 2, 11, 4, 0, 2, -1, -1, -1),
        (3, 4, 8, 3, 5, 4, 3, 2, 5, 11, 5, 2, 10, 7, 6),
        (7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1),
        (9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1),
        (3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1),
        (6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8),
        (9, 5, 4, 11, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1),
        (1, 6, 11, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4),
        (4, 0, 11, 4, 11, 5, 0, 3, 11, 6, 11, 7, 3, 7, 11),
        (7, 6, 11, 7, 11, 8, 5, 4, 11, 4, 8, 11, -1, -1, -1),
        (6, 9, 5, 6, 10, 9, 10, 8, 9, -1, -1, -1, -1, -1, -1),
        (3, 6, 10, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1),
        (0, 10, 8, 0, 5, 10, 0, 1, 5, 5, 6, 10, -1, -1, -1),
        (6, 10, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, 9, 5, 10, 9, 10, 8, 10, 5, 6, -1, -1, -1),
        (0, 10, 3, 0, 6, 10, 0, 9, 6, 5, 6, 9, 1, 2, 11),
        (10, 8, 5, 10, 5, 6, 8, 0, 5, 11, 5, 2, 0, 2, 5),
        (6, 10, 3, 6, 3, 5, 2, 11, 3, 11, 5, 3, -1, -1, -1),
        (5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1),
        (9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1),
        (1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8),
        (1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 3, 6, 1, 6, 11, 3, 8, 6, 5, 6, 9, 8, 9, 6),
        (11, 1, 0, 11, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1),
        (0, 3, 8, 5, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (11, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (10, 5, 11, 7, 5, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (10, 5, 11, 10, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1),
        (5, 10, 7, 5, 11, 10, 1, 9, 0, -1, -1, -1, -1, -1, -1),
        (11, 7, 5, 11, 10, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1),
        (10, 1, 2, 10, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 10, -1, -1, -1),
        (9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 10, 7, -1, -1, -1),
        (7, 5, 2, 7, 2, 10, 5, 9, 2, 3, 2, 8, 9, 8, 2),
        (2, 5, 11, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1),
        (8, 2, 0, 8, 5, 2, 8, 7, 5, 11, 2, 5, -1, -1, -1),
        (9, 0, 1, 5, 11, 3, 5, 3, 7, 3, 11, 2, -1, -1, -1),
        (9, 8, 2, 9, 2, 1, 8, 7, 2, 11, 2, 5, 7, 5, 2),
        (1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1),
        (9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1),
        (9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (5, 8, 4, 5, 11, 8, 11, 10, 8, -1, -1, -1, -1, -1, -1),
        (5, 0, 4, 5, 10, 0, 5, 11, 10, 10, 3, 0, -1, -1, -1),
        (0, 1, 9, 8, 4, 11, 8, 11, 10, 11, 4, 5, -1, -1, -1),
        (11, 10, 4, 11, 4, 5, 10, 3, 4, 9, 4, 1, 3, 1, 4),
        (2, 5, 1, 2, 8, 5, 2, 10, 8, 4, 5, 8, -1, -1, -1),
        (0, 4, 10, 0, 10, 3, 4, 5, 10, 2, 10, 1, 5, 1, 10),
        (0, 2, 5, 0, 5, 9, 2, 10, 5, 4, 5, 8, 10, 8, 5),
        (9, 4, 5, 2, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 5, 11, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1),
        (5, 11, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1),
        (3, 11, 2, 3, 5, 11, 3, 8, 5, 4, 5, 8, 0, 1, 9),
        (5, 11, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1),
        (8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1),
        (0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1),
        (9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 10, 7, 4, 9, 10, 9, 11, 10, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, 4, 9, 7, 9, 10, 7, 9, 11, 10, -1, -1, -1),
        (1, 11, 10, 1, 10, 4, 1, 4, 0, 7, 4, 10, -1, -1, -1),
        (3, 1, 4, 3, 4, 8, 1, 11, 4, 7, 4, 10, 11, 10, 4),
        (4, 10, 7, 9, 10, 4, 9, 2, 10, 9, 1, 2, -1, -1, -1),
        (9, 7, 4, 9, 10, 7, 9, 1, 10, 2, 10, 1, 0, 8, 3),
        (10, 7, 4, 10, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1),
        (10, 7, 4, 10, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1),
        (2, 9, 11, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1),
        (9, 11, 7, 9, 7, 4, 11, 2, 7, 8, 7, 0, 2, 0, 7),
        (3, 7, 11, 3, 11, 2, 7, 4, 11, 1, 11, 0, 4, 0, 11),
        (1, 11, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1),
        (4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1),
        (4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 11, 8, 11, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 0, 9, 3, 9, 10, 10, 9, 11, -1, -1, -1, -1, -1, -1),
        (0, 1, 11, 0, 11, 8, 8, 11, 10, -1, -1, -1, -1, -1, -1),
        (3, 1, 11, 10, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 2, 10, 1, 10, 9, 9, 10, 8, -1, -1, -1, -1, -1, -1),
        (3, 0, 9, 3, 9, 10, 1, 2, 9, 2, 10, 9, -1, -1, -1),
        (0, 2, 10, 8, 0, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 3, 8, 2, 8, 11, 11, 8, 9, -1, -1, -1, -1, -1, -1),
        (9, 11, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 3, 8, 2, 8, 11, 0, 1, 8, 1, 11, 8, -1, -1, -1),
        (1, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
    );

  LUT_FACES_STANDARD: Array[0..LUT_FACES_CONFIGURATIONS_COUNT-1, 0..LUT_EDGES_PER_CONFIGURATION_COUNT-1] of Integer = (
        (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, 1, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 2, 11, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 8, 3, 2, 11, 8, 11, 9, 8, -1, -1, -1, -1, -1, -1),
        (3, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 10, 2, 8, 10, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 9, 0, 2, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 10, 2, 1, 9, 10, 9, 8, 10, -1, -1, -1, -1, -1, -1),
        (3, 11, 1, 10, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 11, 1, 0, 8, 11, 8, 10, 11, -1, -1, -1, -1, -1, -1),
        (3, 9, 0, 3, 10, 9, 10, 11, 9, -1, -1, -1, -1, -1, -1),
        (9, 8, 11, 11, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 4, 7, 3, 0, 4, 1, 2, 11, -1, -1, -1, -1, -1, -1),
        (9, 2, 11, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1),
        (2, 11, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1),
        (8, 4, 7, 3, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (10, 4, 7, 10, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1),
        (9, 0, 1, 8, 4, 7, 2, 3, 10, -1, -1, -1, -1, -1, -1),
        (4, 7, 10, 9, 4, 10, 9, 10, 2, 9, 2, 1, -1, -1, -1),
        (3, 11, 1, 3, 10, 11, 7, 8, 4, -1, -1, -1, -1, -1, -1),
        (1, 10, 11, 1, 4, 10, 1, 0, 4, 7, 10, 4, -1, -1, -1),
        (4, 7, 8, 9, 0, 10, 9, 10, 11, 10, 0, 3, -1, -1, -1),
        (4, 7, 10, 4, 10, 9, 9, 10, 11, -1, -1, -1, -1, -1, -1),
        (9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 0, 8, 1, 2, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1),
        (5, 2, 11, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1),
        (2, 11, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1),
        (9, 5, 4, 2, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 10, 2, 0, 8, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1),
        (0, 5, 4, 0, 1, 5, 2, 3, 10, -1, -1, -1, -1, -1, -1),
        (2, 1, 5, 2, 5, 8, 2, 8, 10, 4, 8, 5, -1, -1, -1),
        (11, 3, 10, 11, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1),
        (4, 9, 5, 0, 8, 1, 8, 11, 1, 8, 10, 11, -1, -1, -1),
        (5, 4, 0, 5, 0, 10, 5, 10, 11, 10, 0, 3, -1, -1, -1),
        (5, 4, 8, 5, 8, 11, 11, 8, 10, -1, -1, -1, -1, -1, -1),
        (9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1),
        (0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1),
        (1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 7, 8, 9, 5, 7, 11, 1, 2, -1, -1, -1, -1, -1, -1),
        (11, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1),
        (8, 0, 2, 8, 2, 5, 8, 5, 7, 11, 5, 2, -1, -1, -1),
        (2, 11, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1),
        (7, 9, 5, 7, 8, 9, 3, 10, 2, -1, -1, -1, -1, -1, -1),
        (9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 10, -1, -1, -1),
        (2, 3, 10, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1),
        (10, 2, 1, 10, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1),
        (9, 5, 8, 8, 5, 7, 11, 1, 3, 11, 3, 10, -1, -1, -1),
        (5, 7, 10, 5, 10, 11, 1, 0, 9, -1, -1, -1, -1, -1, -1),
        (10, 11, 5, 10, 5, 7, 8, 0, 3, -1, -1, -1, -1, -1, -1),
        (10, 11, 5, 7, 10, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (11, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, 5, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 0, 1, 5, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 8, 3, 1, 9, 8, 5, 11, 6, -1, -1, -1, -1, -1, -1),
        (1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1),
        (9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1),
        (5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1),
        (2, 3, 10, 11, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (10, 0, 8, 10, 2, 0, 11, 6, 5, -1, -1, -1, -1, -1, -1),
        (0, 1, 9, 2, 3, 10, 5, 11, 6, -1, -1, -1, -1, -1, -1),
        (5, 11, 6, 1, 9, 2, 9, 10, 2, 9, 8, 10, -1, -1, -1),
        (6, 3, 10, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1),
        (0, 8, 10, 0, 10, 5, 0, 5, 1, 5, 10, 6, -1, -1, -1),
        (3, 10, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1),
        (6, 5, 9, 6, 9, 10, 10, 9, 8, -1, -1, -1, -1, -1, -1),
        (5, 11, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 3, 0, 4, 7, 3, 6, 5, 11, -1, -1, -1, -1, -1, -1),
        (1, 9, 0, 5, 11, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1),
        (11, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1),
        (6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1),
        (1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1),
        (8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1),
        (7, 3, 2, 7, 2, 6, 5, 9, 4, -1, -1, -1, -1, -1, -1),
        (3, 10, 2, 7, 8, 4, 11, 6, 5, -1, -1, -1, -1, -1, -1),
        (5, 11, 6, 4, 7, 2, 4, 2, 0, 2, 7, 10, -1, -1, -1),
        (0, 1, 9, 4, 7, 8, 2, 3, 10, 5, 11, 6, -1, -1, -1),
        (9, 4, 5, 11, 2, 1, 7, 10, 6, -1, -1, -1, -1, -1, -1),
        (8, 4, 7, 3, 10, 5, 3, 5, 1, 5, 10, 6, -1, -1, -1),
        (5, 1, 0, 5, 0, 4, 7, 10, 6, -1, -1, -1, -1, -1, -1),
        (0, 3, 8, 4, 5, 9, 10, 6, 7, -1, -1, -1, -1, -1, -1),
        (4, 5, 9, 7, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (11, 4, 9, 6, 4, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 11, 6, 4, 9, 11, 0, 8, 3, -1, -1, -1, -1, -1, -1),
        (11, 0, 1, 11, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1),
        (8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 11, -1, -1, -1),
        (1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1),
        (3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1),
        (0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1),
        (11, 4, 9, 11, 6, 4, 10, 2, 3, -1, -1, -1, -1, -1, -1),
        (0, 8, 2, 2, 8, 10, 4, 9, 11, 4, 11, 6, -1, -1, -1),
        (3, 10, 2, 0, 1, 6, 0, 6, 4, 6, 1, 11, -1, -1, -1),
        (6, 4, 8, 6, 8, 10, 2, 1, 11, -1, -1, -1, -1, -1, -1),
        (9, 6, 4, 9, 3, 6, 9, 1, 3, 10, 6, 3, -1, -1, -1),
        (8, 10, 6, 8, 6, 4, 9, 1, 0, -1, -1, -1, -1, -1, -1),
        (3, 10, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1),
        (6, 4, 8, 10, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (7, 11, 6, 7, 8, 11, 8, 9, 11, -1, -1, -1, -1, -1, -1),
        (0, 7, 3, 0, 11, 7, 0, 9, 11, 6, 7, 11, -1, -1, -1),
        (11, 6, 7, 1, 11, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1),
        (11, 6, 7, 11, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1),
        (1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1),
        (2, 6, 7, 2, 7, 3, 0, 9, 1, -1, -1, -1, -1, -1, -1),
        (7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1),
        (7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 3, 10, 11, 6, 8, 11, 8, 9, 8, 6, 7, -1, -1, -1),
        (2, 0, 9, 2, 9, 11, 6, 7, 10, -1, -1, -1, -1, -1, -1),
        (1, 11, 2, 3, 8, 0, 6, 7, 10, -1, -1, -1, -1, -1, -1),
        (11, 2, 1, 6, 7, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (8, 9, 1, 8, 1, 3, 10, 6, 7, -1, -1, -1, -1, -1, -1),
        (0, 9, 1, 10, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 8, 0, 10, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (7, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (7, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 0, 8, 10, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 1, 9, 10, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (8, 1, 9, 8, 3, 1, 10, 7, 6, -1, -1, -1, -1, -1, -1),
        (11, 1, 2, 6, 10, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 2, 11, 3, 0, 8, 6, 10, 7, -1, -1, -1, -1, -1, -1),
        (2, 9, 0, 2, 11, 9, 6, 10, 7, -1, -1, -1, -1, -1, -1),
        (2, 10, 3, 11, 8, 6, 11, 9, 8, 8, 7, 6, -1, -1, -1),
        (7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1),
        (2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1),
        (1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1),
        (11, 7, 6, 11, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1),
        (11, 7, 6, 1, 7, 11, 1, 8, 7, 1, 0, 8, -1, -1, -1),
        (0, 3, 7, 0, 7, 11, 0, 11, 9, 6, 11, 7, -1, -1, -1),
        (7, 6, 11, 7, 11, 8, 8, 11, 9, -1, -1, -1, -1, -1, -1),
        (6, 8, 4, 10, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 6, 10, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1),
        (8, 6, 10, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1),
        (9, 4, 6, 9, 6, 3, 9, 3, 1, 10, 3, 6, -1, -1, -1),
        (6, 8, 4, 6, 10, 8, 2, 11, 1, -1, -1, -1, -1, -1, -1),
        (3, 2, 10, 0, 6, 1, 0, 4, 6, 6, 11, 1, -1, -1, -1),
        (0, 2, 8, 2, 10, 8, 4, 11, 9, 4, 6, 11, -1, -1, -1),
        (11, 9, 4, 11, 4, 6, 10, 3, 2, -1, -1, -1, -1, -1, -1),
        (8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1),
        (0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 8, 0, 1, 9, 2, 2, 9, 4, 2, 4, 6, -1, -1, -1),
        (1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1),
        (8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 11, 1, -1, -1, -1),
        (11, 1, 0, 11, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1),
        (4, 6, 11, 4, 11, 9, 0, 3, 8, -1, -1, -1, -1, -1, -1),
        (11, 9, 4, 6, 11, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 9, 5, 7, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 3, 4, 9, 5, 10, 7, 6, -1, -1, -1, -1, -1, -1),
        (5, 0, 1, 5, 4, 0, 7, 6, 10, -1, -1, -1, -1, -1, -1),
        (8, 7, 4, 3, 5, 10, 3, 1, 5, 5, 6, 10, -1, -1, -1),
        (9, 5, 4, 11, 1, 2, 7, 6, 10, -1, -1, -1, -1, -1, -1),
        (0, 9, 1, 4, 8, 7, 2, 10, 3, 5, 6, 11, -1, -1, -1),
        (5, 6, 11, 4, 2, 7, 4, 0, 2, 2, 10, 7, -1, -1, -1),
        (3, 2, 10, 7, 4, 8, 11, 5, 6, -1, -1, -1, -1, -1, -1),
        (7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1),
        (8, 7, 4, 9, 5, 0, 0, 5, 6, 0, 6, 2, -1, -1, -1),
        (1, 5, 2, 5, 6, 2, 3, 4, 0, 3, 7, 4, -1, -1, -1),
        (6, 2, 1, 6, 1, 5, 4, 8, 7, -1, -1, -1, -1, -1, -1),
        (11, 5, 6, 1, 7, 9, 1, 3, 7, 7, 4, 9, -1, -1, -1),
        (1, 0, 9, 5, 6, 11, 8, 7, 4, -1, -1, -1, -1, -1, -1),
        (4, 0, 3, 4, 3, 7, 6, 11, 5, -1, -1, -1, -1, -1, -1),
        (5, 6, 11, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (6, 9, 5, 6, 10, 9, 10, 8, 9, -1, -1, -1, -1, -1, -1),
        (3, 6, 10, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1),
        (0, 10, 8, 0, 5, 10, 0, 1, 5, 5, 6, 10, -1, -1, -1),
        (6, 10, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1),
        (5, 6, 11, 1, 2, 9, 9, 2, 10, 9, 10, 8, -1, -1, -1),
        (0, 9, 1, 2, 10, 3, 5, 6, 11, -1, -1, -1, -1, -1, -1),
        (10, 8, 0, 10, 0, 2, 11, 5, 6, -1, -1, -1, -1, -1, -1),
        (2, 10, 3, 11, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1),
        (9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1),
        (1, 5, 6, 1, 6, 2, 3, 8, 0, -1, -1, -1, -1, -1, -1),
        (1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 3, 8, 1, 8, 9, 5, 6, 11, -1, -1, -1, -1, -1, -1),
        (9, 1, 0, 5, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 3, 8, 5, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (11, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (10, 5, 11, 7, 5, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (10, 5, 11, 10, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1),
        (5, 10, 7, 5, 11, 10, 1, 9, 0, -1, -1, -1, -1, -1, -1),
        (9, 8, 5, 8, 7, 5, 11, 3, 1, 11, 10, 3, -1, -1, -1),
        (10, 1, 2, 10, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1),
        (2, 10, 3, 0, 8, 1, 1, 8, 7, 1, 7, 5, -1, -1, -1),
        (9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 10, 7, -1, -1, -1),
        (7, 5, 9, 7, 9, 8, 3, 2, 10, -1, -1, -1, -1, -1, -1),
        (2, 5, 11, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1),
        (8, 2, 0, 8, 5, 2, 8, 7, 5, 11, 2, 5, -1, -1, -1),
        (11, 2, 1, 9, 0, 5, 5, 0, 3, 5, 3, 7, -1, -1, -1),
        (9, 8, 7, 9, 7, 5, 11, 2, 1, -1, -1, -1, -1, -1, -1),
        (1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1),
        (9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1),
        (9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (5, 8, 4, 5, 11, 8, 11, 10, 8, -1, -1, -1, -1, -1, -1),
        (5, 0, 4, 5, 10, 0, 5, 11, 10, 10, 3, 0, -1, -1, -1),
        (4, 5, 9, 0, 1, 8, 8, 1, 11, 8, 11, 10, -1, -1, -1),
        (11, 10, 3, 11, 3, 1, 9, 4, 5, -1, -1, -1, -1, -1, -1),
        (2, 5, 1, 2, 8, 5, 2, 10, 8, 4, 5, 8, -1, -1, -1),
        (0, 4, 5, 0, 5, 1, 2, 10, 3, -1, -1, -1, -1, -1, -1),
        (0, 2, 10, 0, 10, 8, 4, 5, 9, -1, -1, -1, -1, -1, -1),
        (9, 4, 5, 2, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 5, 11, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1),
        (5, 11, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1),
        (3, 8, 0, 1, 11, 2, 4, 5, 9, -1, -1, -1, -1, -1, -1),
        (1, 11, 2, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1),
        (0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 4, 5, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 10, 7, 4, 9, 10, 9, 11, 10, -1, -1, -1, -1, -1, -1),
        (4, 8, 7, 9, 10, 0, 9, 11, 10, 10, 3, 0, -1, -1, -1),
        (1, 11, 10, 1, 10, 4, 1, 4, 0, 7, 4, 10, -1, -1, -1),
        (3, 1, 11, 3, 11, 10, 7, 4, 8, -1, -1, -1, -1, -1, -1),
        (4, 10, 7, 9, 10, 4, 9, 2, 10, 9, 1, 2, -1, -1, -1),
        (9, 1, 0, 8, 7, 4, 2, 10, 3, -1, -1, -1, -1, -1, -1),
        (10, 7, 4, 10, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1),
        (8, 7, 4, 3, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 9, 11, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1),
        (9, 11, 2, 9, 2, 0, 8, 7, 4, -1, -1, -1, -1, -1, -1),
        (3, 7, 4, 3, 4, 0, 1, 11, 2, -1, -1, -1, -1, -1, -1),
        (1, 11, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1),
        (0, 9, 1, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (9, 11, 8, 11, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 0, 9, 3, 9, 10, 10, 9, 11, -1, -1, -1, -1, -1, -1),
        (0, 1, 11, 0, 11, 8, 8, 11, 10, -1, -1, -1, -1, -1, -1),
        (3, 1, 11, 10, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 2, 10, 1, 10, 9, 9, 10, 8, -1, -1, -1, -1, -1, -1),
        (1, 0, 9, 2, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 2, 10, 8, 0, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (3, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (2, 3, 8, 2, 8, 11, 11, 8, 9, -1, -1, -1, -1, -1, -1),
        (9, 11, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 3, 8, 1, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
        (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
  );

{ --------------------------------- TMCCubes --------------------------------- }
class function TMCCubes.IsCaseAmbigous(const N: Integer): Boolean;
var
  I: Integer;
begin
  for I:=Low(LUT_AMBIGOUS_CASES) to High(LUT_AMBIGOUS_CASES) do begin
    if LUT_AMBIGOUS_CASES[I] = N then begin
      Result := True;
      Exit;
    end;
  end;
  Result := False;
end;

class function TMCCubes.CalculateCaseNumber(const Cube: TPMCCube; const RefIsoValue: Single): Integer;
var
  I: Integer;
begin
  Result := 0;
  for I := 0 to 7 do begin
    if (Cube^.V[I].Weight  ) > RefIsoValue then
      Inc(Result, 1 shl I);
  end;
end;

class procedure TMCCubes.ComputeEdgePoint(const V1, V2: TPMCVertex; const RefIsoValue: Single; const IVertex: TPD4Vector);
var
  S: Double;
  Direction: TD3Vector;
begin
  S := (RefIsoValue - V1.Weight)/(V2.Weight - V1.Weight);
  if (S >= 0.0) and (S <= 1.0) then begin
    TDVectorMath.Subtract(@(V2^.Position), @(V1^.Position), @Direction);
    TDVectorMath.ScalarMul(S, @Direction, @Direction);
    IVertex.X := V1.Position.X + Direction.X;
    IVertex.Y := V1.Position.Y + Direction.Y;
    IVertex.Z := V1.Position.Z + Direction.Z;
    IVertex.W := ( V2^.ColorIdx - V1^.ColorIdx ) * S + V1^.ColorIdx;
  end
  else if (S < 0.0) then begin
    IVertex.X := V1^.Position.X;
    IVertex.Y := V1^.Position.Y;
    IVertex.Z := V1^.Position.Z;
    IVertex.W := V1^.ColorIdx;
  end
  else begin
    IVertex.X := V2^.Position.X;
    IVertex.Y := V2^.Position.Y;
    IVertex.Z := V2^.Position.Z;
    IVertex.W := V2^.ColorIdx;
  end;
end;

class procedure TMCCubes.ComputeEdgePoints(const Cube: TPMCCube; const RefIsoValue: Single);
begin
  ComputeEdgePoint(@(Cube^.V[0]), @(Cube^.V[1]), RefIsoValue, @(Cube^.E[0]));
  ComputeEdgePoint(@(Cube^.V[1]), @(Cube^.V[2]), RefIsoValue, @(Cube^.E[1]));
  ComputeEdgePoint(@(Cube^.V[2]), @(Cube^.V[3]), RefIsoValue, @(Cube^.E[2]));
  ComputeEdgePoint(@(Cube^.V[3]), @(Cube^.V[0]), RefIsoValue, @(Cube^.E[3]));

  ComputeEdgePoint(@(Cube^.V[4]), @(Cube^.V[5]), RefIsoValue, @(Cube^.E[4]));
  ComputeEdgePoint(@(Cube^.V[5]), @(Cube^.V[6]), RefIsoValue, @(Cube^.E[5]));
  ComputeEdgePoint(@(Cube^.V[6]), @(Cube^.V[7]), RefIsoValue, @(Cube^.E[6]));
  ComputeEdgePoint(@(Cube^.V[7]), @(Cube^.V[4]), RefIsoValue, @(Cube^.E[7]));

  ComputeEdgePoint(@(Cube^.V[0]), @(Cube^.V[4]), RefIsoValue, @(Cube^.E[8]));
  ComputeEdgePoint(@(Cube^.V[1]), @(Cube^.V[5]), RefIsoValue, @(Cube^.E[9]));
  ComputeEdgePoint(@(Cube^.V[3]), @(Cube^.V[7]), RefIsoValue, @(Cube^.E[10]));
  ComputeEdgePoint(@(Cube^.V[2]), @(Cube^.V[6]), RefIsoValue, @(Cube^.E[11]));
end;

class procedure TMCCubes.InitializeCube(const Cube: TPMCCube; const Position: TPD3Vector; const CubeSize: Double);
begin
  Cube^.V[0].Position.X := Position^.X;
  Cube^.V[0].Position.Y := Position^.Y;
  Cube^.V[0].Position.Z := Position^.Z;

  Cube^.V[1].Position.X := Position^.X + CubeSize;
  Cube^.V[1].Position.Y := Position^.Y;
  Cube^.V[1].Position.Z := Position^.Z;

  Cube^.V[2].Position.X := Position^.X + CubeSize;
  Cube^.V[2].Position.Y := Position^.Y + CubeSize;
  Cube^.V[2].Position.Z := Position^.Z;

  Cube^.V[3].Position.X := Position^.X;
  Cube^.V[3].Position.Y := Position^.Y + CubeSize;
  Cube^.V[3].Position.Z := Position^.Z;

  Cube^.V[4].Position.X := Position^.X;
  Cube^.V[4].Position.Y := Position^.Y;
  Cube^.V[4].Position.Z := Position^.Z + CubeSize;

  Cube^.V[5].Position.X := Position^.X + CubeSize;
  Cube^.V[5].Position.Y := Position^.Y;
  Cube^.V[5].Position.Z := Position^.Z + CubeSize;

  Cube^.V[6].Position.X := Position^.X + CubeSize;
  Cube^.V[6].Position.Y := Position^.Y + CubeSize;
  Cube^.V[6].Position.Z := Position^.Z + CubeSize;

  Cube^.V[7].Position.X := Position^.X;
  Cube^.V[7].Position.Y := Position^.Y + CubeSize;
  Cube^.V[7].Position.Z := Position^.Z + CubeSize;
end;

class procedure TMCCubes.InitializeCell(const Cube: TPMCCube; const PosX_Y, DirX_Y, PosX1_Y, DirX1_Y, PosX1_Y1, DirX1_Y1, PosX_Y1, DirX_Y1: TPD3Vector);
begin
  TDVectorMath.Assign(@(Cube^.V[0]), PosX_Y);
  TDVectorMath.Assign(@(Cube^.V[1]), PosX1_Y);
  TDVectorMath.Assign(@(Cube^.V[2]), PosX1_Y1);
  TDVectorMath.Assign(@(Cube^.V[3]), PosX_Y1);

  TDVectorMath.Add(PosX_Y, DirX_Y, @(Cube^.V[4]));
  TDVectorMath.Add(PosX1_Y, DirX1_Y, @(Cube^.V[5]));
  TDVectorMath.Add(PosX1_Y1, DirX1_Y1, @(Cube^.V[6]));
  TDVectorMath.Add(PosX_Y1, DirX_Y1, @(Cube^.V[7]));
end;

class procedure TMCCubes.CreateFacesForCube(const Cube: TPMCCube; const RefIsoValue: Single; const Faces: TFacesList; const CalcColors: boolean);
var
  I, CaseNumber, Offset: Integer;
  FaceIndexList: TPFacesConfiguration;
  E1, E2, E3: TPD4Vector;
begin
  ComputeEdgePoints(Cube, RefIsoValue);
  CaseNumber := CalculateCaseNumber(Cube, RefIsoValue);
  if IsCaseAmbigous(CaseNumber) then
    FaceIndexList := @LUT_FACES_AMBIGOUS[CaseNumber]
  else
    FaceIndexList := @LUT_FACES_STANDARD[CaseNumber];
  Offset := 0;
  for I := 0 to 4 do begin
    if (FaceIndexList[Offset] >= 0) then begin
      E1 := @(Cube^.E[FaceIndexList[Offset + 1]]);
      E2 := @(Cube^.E[FaceIndexList[Offset + 0]]);
      E3 := @(Cube^.E[FaceIndexList[Offset + 2]]);
      if CalcColors then
        Faces.AddFace(E1, E2, E3)
      else
        Faces.AddFaceWithoutColor(E1, E2, E3);
    end;
    Inc(Offset, 3);
  end;
end;


end.




